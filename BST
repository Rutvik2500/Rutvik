#include <stdio.h>
 #include <stdlib.h>
 // Node structure
 struct Node 
{
 int data;
 struct Node* left;
 struct Node* right;
};
 // Function to create a new node
 struct Node* createNode(int value) 
{
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 if (newNode == NULL) 
 {
 printf("Memory allocation failed.\n");
 exit(1);
 }
 newNode->data = value;
 newNode->left = NULL;
 newNode->right = NULL;
 return newNode;
}
 // Function to insert a value into the BST
 struct Node* insert(struct Node* root, int value) 
{
 if (root == NULL)
 return createNode(value);
 if (value < root->data)
 root->left = insert(root->left, value);
 else
 root->right = insert(root->right, value);
 return root;
}
 // Preorder traversal (Root - Left - Right)
 void preorder(struct Node* root) 
{
 if (root != NULL) 
 {
 printf("%d ", root->data);
 preorder(root->left);
 preorder(root->right);
 }
}
// Inorder traversal (Left - Root - Right)
 void inorder(struct Node* root) 
{
 if (root != NULL) 
 {
 inorder(root->left);
 printf("%d ", root->data);
 inorder(root->right);
 }
}
 // Postorder traversal (Left - Right - Root)
 void postorder(struct Node* root) 
{
 if (root != NULL) 
 {
 postorder(root->left);
 postorder(root->right);
 printf("%d ", root->data);
 }
}
 // Function to search a value in the BST
 struct Node* search(struct Node* root, int key)
{
 if (root == NULL || root->data == key)
 return root;
 if (key < root->data)
 return search(root->left, key);
 else
 return search(root->right, key);
}
 // Function to free the BST (optional cleanup)
 void freeTree(struct Node* root) 
{
 if (root == NULL)
 return;
 freeTree(root->left);
 freeTree(root->right);
 free(root);
}
 // Main function
 int main()
{
 struct Node* root = NULL;
 int n, value;
 printf("Enter number of nodes to insert: ");
 scanf("%d", &n);
 for (int i = 0; i < n; i++) 
 {
 printf("Enter value %d: ", i + 1);
 scanf("%d", &value);
root = insert(root, value);
 }
 // Display traversals 
 printf("\nPreorder Traversal: ");
 preorder(root);
 printf("\nInorder Traversal: ");
 inorder(root);
 printf("\nPostorder Traversal: ");
 postorder(root);
 // Search in the BST
 printf("\n\nEnter value to search in the BST: ");
 scanf("%d", &value);
 struct Node* result = search(root, value);
 if (result != NULL)
 printf("Value %d found in the BST.\n", value);
 else
 printf("Value %d not found in the BST.\n", value);
 // Free memory
 freeTree(root);
 return 0;
}
